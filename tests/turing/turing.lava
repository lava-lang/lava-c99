type State {
    u32 write;
    char move;
    u32 nextCard;
}

type Card {
    u32 id;
    State stateA;
    State stateB;
    Card* next;
}

Card* getCards(str file) {
    c.FILE* fptr = fopen(file, "r");

    // creating the halt card
    char haltChar = 'S';
    State a = {0, haltChar, 0};
    State b = {0, haltChar, 0};
    Card head = new {0, a, b, 0};
    Card next = new {0, 0, 0, 0};
    head.next = next;

    Card dummy = new {0, 0, 0, 0};
    dummy = head.next;
    Card* prev = 0;

    char fileChar, EOFChar;
    c.fileChar = fscanf(fptr, "%d", &dummy->id);
    c.EOFChar = EOF;
    while (fileChar != EOFChar) {
        c.fscanf(fptr, "%d %c %d", &dummy->stateA.write, &dummy->stateA.move, &dummy->stateA.nextCard);
        c.fscanf(fptr, "%d %c %d", &dummy->stateB.write, &dummy->stateB.move, &dummy->stateB.nextCard);

        Card nextCard = new {0, 0, 0, 0};
        dummy.next = nextCard;

        c.prev = dummy;
        dummy = dummy.next;

        c.fileChar = fscanf(fptr, "%d", &dummy->id);
    }

    c.prev->next = NULL;
    c.fclose(fptr);

    return head;
}

Card* searchCard(Card* head, u32 target) {
    Card dummy = new {0, 0, 0, 0};
    dummy = head;
    while (dummy != null) {
        if (dummy.id == target) {
            return dummy;
        }
        dummy = dummy.next;
    }
    return null;
}

u32 findDuplicate(Card* head, u32 target) {
    u32 count = 0;
    Card dummy = new {0, 0, 0, 0};
    dummy = head;
    while (dummy != null) {
        if (dummy.id == target) {
            count++;
        }
        dummy = dummy.next;
    }

    if (count > 1) {
        return 0;
    }

    return 1;
}

u32 validateCards(Card* head) {
    u32 ret = 1;
    c.printf("\nValidating Cards...\n");

    Card dummy = new {0, 0, 0, 0};
    dummy = head;
    int cardsCount = 0;
    while (dummy.next != null) {
        dummy = dummy.next;
        u32 isValidCard = 1;
        cardsCount++;

        if (findDuplicate(head, dummy.id) == 0) {
            c.printf("Card ID: %d is duplicate\n", dummy->id);
            ret = 0;
            continue;
        }

        u32 write, move;
        State stateTemp = {0, 0, 0};
        for (int i = 0; i < 2; i++) {
            if (i == 0) {
                stateTemp = dummy.stateA;
            } else {
                stateTemp = dummy.stateB;
            }
            write = stateTemp.write == 0 || stateTemp.write == 1;
            move  = stateTemp.move == 'L' || stateTemp.move == 'R' || stateTemp.move == 'S';
            Card find = new {0, 0, 0, 0};
            find = searchCard(head, stateTemp.nextCard);

            if (!write || !move || (!find && stateTemp.nextCard != 0)) {
                isValidCard = 0;
                break;
            }
        }

        if (isValidCard) {
            c.printf("Card ID: %d is valid\n", dummy->id);
        } else {
            c.printf("Card ID: %d is not valid\n", dummy->id);
            ret = 0;
        }
    }

    c.printf("\n");

    if (cardsCount < 1) {
        c.printf("Invalid: No cards available\n");
        return 0;
    }

    return ret;
}

void printCards(Card* head) {
    c.printf("Printing cards...\n-----------------\n");
    Card dummy = new {0, 0, 0, 0};
    dummy = head.next;
    while (dummy != null) {
        c.printf("\nCard - %d\n", dummy->id);
        c.printf("S  W M N\n");
        c.printf("0  %d %c %d\n", dummy->stateA.write, dummy->stateA.move, dummy->stateA.nextCard);
        c.printf("1  %d %c %d\n\n", dummy->stateB.write, dummy->stateB.move, dummy->stateB.nextCard);
        dummy = dummy.next;
    }
    c.printf("-----------------\n");
}

type Cell {
    u32 val;
    Cell* next;
    Cell* prev;
}

void printTape(Cell* head) {
    Cell dummy = new {0, 0, 0, 0};
    dummy = head;
    while (dummy.prev != null) {
        dummy = dummy.prev;
    }
    while (dummy != null) {
        c.printf("%d ", dummy->val);
        dummy = dummy.next;
    }
    c.printf("\n\n");
}

Cell* move(Cell* head, char dir) {
    if (dir == 'R') {
        if (head.next == null) {
            Cell temp = new {0, 0, 0, 0};
            temp.val = 0;
            head.next = temp;
            temp.prev = head;
            temp.next = null;
        }
        head = head.next;
    } else if (dir == 'L') {
        if (head.prev == null) {
            Cell temp = new {0, 0, 0, 0};
            temp.val = 0;
            head.prev = temp;
            temp.next = head;
            temp.prev = null;
        }
        head = head.prev;
    } else if (dir == 'S') {

    } else {
        c.printf("Invalid Direction\n");
        exit(0);
    }
    return head;
}

void getInitialTape(Cell* head, str file) {
    c.FILE* fptr = fopen(file, "r");

    Cell dummy = new {0, 0, 0};
    dummy = head;
    char temp;
    while (true) {
        bool term = c.fscanf(fptr, "%c", &temp) == EOF;
        if (term) {
            break;
        }
        dummy.val = temp - '0';
        dummy = move(dummy, 'R');
        c.fscanf(fptr, "%c", &temp);
    }

    dummy = move(dummy, 'L');
    dummy.next = null;
}

u32 validateTape(Cell* head) {
    Cell dummy = new {0, 0, 0};
    dummy = head;
    while (dummy != null) {
        if (dummy.val != 0 && dummy.val != 1) {
            c.printf("Invalid Tape!\n");
            return 0;
        }
        dummy = dummy.next;
    }
    c.printf("Valid tape\n\n");
    return 1;
}

u32 tapeCountOnes(Cell* head) {
    u32 count = 0;
    Cell dummy = new {0, 0, 0, 0};
    dummy = head;
    while (dummy != null) {
        if (dummy.val == 1) {
            count++;
        }
        dummy = dummy.prev;
    }

    dummy = head.next;
    while (dummy != null) {
        if (dummy.val == 1) {
            count++;
        }
        dummy = dummy.next;
    }

    return count;
}

int main(int argc, str[] argv) {
    str file1, file2;
    c.file1 = argv[1];
    c.file2 = argv[2];
    Card cardsHead = new {0, 0, 0, 0};
    cardsHead = getCards(file1);

    if (validateCards(cardsHead) == 0) {
        return 0;
    }

    printCards(cardsHead);

    Cell tapeHead = new {0, null, null};
    getInitialTape(tapeHead, file2);

    if (validateTape(tapeHead) == 0) {
        return 0;
    }

    printTape(tapeHead);

    c.printf("Starting Execution...\n---------------------\n\n");
    Card currentCard = new {0, 0, 0, 0};
    currentCard = cardsHead.next;
    int idx = 0;
    while (true) {
        c.printf("STEP: %d\n", idx);
        printTape(tapeHead);

        if (currentCard.id == 0) {
            break;
        }

        u32 tempVal = tapeHead.val;
        State currentState;
        if (tempVal == 0) {
            currentState = currentCard.stateA;
        } else {
            currentState = currentCard.stateB;
        }
        tapeHead.val = currentState.write;
        tapeHead = move(tapeHead, currentState.move);
        currentCard = searchCard(cardsHead, currentState.nextCard);

        idx++;
        if (idx == 10000 + 1) {
            c.printf("Maximum steps exceeded\n");
            return 0;
        }
    }

    c.printf("---------------------\nEnd of Execution\n\n");
    c.printf("Result\n");
    c.printTape(tapeHead);
    c.printf("Number of ones: %d\n", tapeCountOnes(tapeHead));
}